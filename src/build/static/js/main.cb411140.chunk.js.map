{"version":3,"sources":["component/Submitter.js","component/ShowNameForm.js","component/ShowNameTemplate.js","Pages/ShowNamePage.js","App.js","serviceWorker.js","index.js"],"names":["Input","styled","input","Btn","MdGavel","Box","div","Submitter","props","useState","customer","setCustomer","secretno","setSecretno","className","onChange","e","target","value","placeholder","onClick","whois","commitjson","console","log","WhiteBox","IO","PATHS","instance","axios","create","baseURL","timeout","StyledLink","Link","ShowNameForm","state","status","cnt","isrun","who","th","setState","method","url","then","response","data","loop","setInterval","timer","catch","err","clearInterval","confirm","self","responseType","to","this","exact","path","component","Component","NameTemplateBlock","YOUAREALONE","ShowNameTemplate","ShowNamePage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb411140.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { MdGavel } from 'react-icons/md';\n\nconst Input = styled.input`\n  font-size: 20px;\n  margin-bottom: 5px;\n  margin-left: 1px;\n  margin-right: 1px;\n  margin-top: 5px;\n  padding: 1px;\n  width: 300px;\n`;\n\nconst Btn = styled(MdGavel)`\n  background-color: white;\n  height: 69px;\n  justify-content: center;\n  margin: 4px;\n  margin-right: 10px;\n  padding: 0px;\n  width: 69px;\n`;\n\nconst Box = styled.div`\n  display: inline-flex;\n  height: 92px;\n  width: 420px;\n  .inner {\n    justify-content: center;\n    margin-bottom: 5px;\n    margin-left: 10px;\n    margin-right: 1px;\n    margin-top: 5px;\n  }\n`;\n\nconst Submitter = props => {\n  const [customer, setCustomer] = useState('');\n  const [secretno, setSecretno] = useState('');\n  return (\n    <Box>\n      <div className=\"inner\">\n        <Input\n          onChange={e => {\n            setCustomer(e.target.value);\n          }}\n          placeholder=\"Customer\"\n          value={customer}\n        />\n        <Input\n          onChange={e => {\n            setSecretno(e.target.value);\n          }}\n          placeholder=\"SecretNo\"\n          value={secretno}\n        />\n      </div>\n      <div className=\"inner\">\n        <Btn\n          onClick={() => {\n            const whois = props.whois;\n            if (customer === '' || secretno === '') return;\n            const commitjson = {\n              whois: { whois },\n              customer: { customer },\n              secretno: { secretno },\n            };\n            console.log(commitjson);\n            setCustomer('');\n            setSecretno('');\n          }}\n        />\n      </div>\n    </Box>\n  );\n};\n\nexport default Submitter;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { Route, Link } from 'react-router-dom';\nimport Submitter from './Submitter';\nimport axios from 'axios';\n\nconst WhiteBox = styled.div`\n  .name-area {\n    -khtml-user-select: none;\n    -moz-user-select: -moz-none;\n    -ms-user-select: none;\n    -webkit-user-select: none;\n    display: block;\n    flex-direction: column;\n    font-size: 10rem;\n    font-weight: bold;\n    justify-content: center;\n    letter-spacing: 2px;\n    padding-bottom: 1.5rem;\n\n    user-select: none;\n  }\n  align-items: center;\n  background: white;\n  border-radius: 2rem;\n  box-shadow: 0 0 25px rgba(0, 0, 0, 1.125);\n  height: 380px;\n  padding: 2rem;\n  width: 480px;\n`;\n\nconst IO = ['HUGH', 'CARL', 'SAM', 'MARK'];\nconst PATHS = ['/submit', '/'];\n\nconst instance = axios.create({\n  baseURL: 'http://192.168.0.71:4500/api',\n  timeout: 1000,\n});\n\nconst StyledLink = styled(Link)`\n  color: black;\n  text-decoration: none;\n  &:focus,\n  &:hover,\n  &:visited,\n  &:link,\n  &:active {\n    text-decoration: none;\n  }\n`;\nclass ShowNameForm extends Component {\n  state = { status: 0, cnt: 0, isrun: false, who: 'Start' };\n  th = this;\n  componentDidMount() {}\n  onClick = () => {\n    this.setState({ status: (this.state.status + 1) % 3 });\n    switch (this.state.status) {\n      case 0:\n        instance({\n          method: 'post',\n          url: '/posts/start',\n        })\n          .then(response => {\n            if (response.data === 'start') {\n              this.loop = setInterval(this.timer, 20);\n              this.setState({ isrun: !this.state.isrun });\n            }\n          })\n          .catch(err => {\n            this.setState({ status: 0 });\n            return;\n          });\n\n        break;\n      case 1:\n        clearInterval(this.loop);\n        instance({\n          method: 'post',\n          url: '/posts/end',\n        })\n          .then(response => {\n            if (response.data.confirm === 'end') {\n              this.setState({\n                isrun: !this.state.isrun,\n                cnt: response.data.cnt % 4,\n              });\n            } else {\n              this.setState({ status: 0, who: 'Start' });\n            }\n          })\n          .then(response => {\n            this.setState({ who: IO[this.state.cnt] });\n          })\n          .catch(err => {\n            this.setState({ status: 0 });\n            return;\n          });\n\n        break;\n      case 2:\n        this.setState({ who: 'Start' });\n        break;\n      default:\n    }\n  };\n\n  timer = () => {\n    const self = this;\n    axios({\n      method: 'get',\n      url: 'http://192.168.0.71:4500/api/posts',\n      responseType: 'text',\n    }).then(function(response) {\n      self.setState({ cnt: response.data % 4 });\n    });\n    this.setState({ who: IO[this.state.cnt] });\n  };\n\n  render() {\n    return (\n      <WhiteBox>\n        <StyledLink\n          to={this.state.isrun ? PATHS[0] : PATHS[1]}\n          className=\"name-area\"\n          onClick={this.onClick}\n        >\n          {this.state.who}\n        </StyledLink>\n        <Route\n          exact\n          path=\"/submit\"\n          component={props => (\n            <Submitter {...props} whois={IO[this.state.cnt]} />\n          )}\n        />\n      </WhiteBox>\n    );\n  }\n}\n\nexport default ShowNameForm;\n","import React from 'react';\nimport styled from 'styled-components';\nimport ShowNameForm from './ShowNameForm';\n\nconst NameTemplateBlock = styled.div`\n  align-items: center;\n  background: #f1f3f5;\n  bottom: 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n`;\n\nconst YOUAREALONE = styled.div`\n  font-size: 5rem;\n  font-weight: bold;\n  margin: 3rem;\n`;\n\nconst ShowNameTemplate = () => {\n  return (\n    <NameTemplateBlock>\n      <YOUAREALONE>You are ALONE</YOUAREALONE>\n      <ShowNameForm />\n    </NameTemplateBlock>\n  );\n};\n\nexport default ShowNameTemplate;\n","import React from 'react';\nimport ShowNameTemplate from '../component/ShowNameTemplate';\n\nconst ShowNamePage = () => {\n  return <ShowNameTemplate />;\n};\n\nexport default ShowNamePage;\n","import React from 'react';\nimport './App.css';\nimport ShowNamePage from './Pages/ShowNamePage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ShowNamePage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}